#!/usr/bin/env python -i

import objc

DVTFoundation = objc.loadBundle('DVTFoundation', globals(), "/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework")
CSServiceClient = objc.loadBundle("CSServiceClient", globals(), "/Applications/Xcode.app/Contents/SharedFrameworks/CSServiceClient.framework")
IDEFoundation = objc.loadBundle("IDEFoundation", globals(), "/Applications/Xcode.app/Contents/Frameworks/IDEFoundation.framework")
Xcode3Core = objc.loadBundle('Xcode3Core', globals(), "/Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin")

objc.loadBundleFunctions(IDEFoundation, globals(), [('IDEInitialize', objc._C_VOID + objc._C_NSUInteger + objc._C_PTR + objc._C_ID)], False)

IDEInitialize(1, None)


PROJECT_NAME = u'ProjectName'

project = PBXProject.alloc().init()
project.setPreferredProjectFormat_(PBXProject._nativeFormat())
project.setForceWriteToFileSystem_(True)
project.setLastUpgradeCheck_(u'0500')
project.setPath_(u'/Users/toulouse/code/ATToolkit/Tools/Test.xcodeproj')
project.setClassPrefix_(u'AT')
project.setOrganizationName_(u'Andrew Toulouse')
project.createDefaultProjectSettingsConfigurationsIfNeeded()

mainGroup = PBXGroup.groupWithName_path_(PROJECT_NAME, PROJECT_NAME)
frameworks = PBXGroup.groupWithName_(u'Frameworks')
project.rootGroup().addItems_([mainGroup, frameworks])

target = PBXNativeTarget.alloc().initWithName_productTypeIdentifier_(PROJECT_NAME, u'com.apple.product-type.application')
project.addTarget_(target)

sourcesPhase = PBXSourcesBuildPhase.alloc().init()
mainGroup.addFiles_copy_createGroupsRecursively_([u'/Users/toulouse/code/ATToolkit/Tools/Test/main.m'], False, True)
#target.addReference_(mainFileRef)
#print target.appropriateBuildPhaseForFileReference_(mainFileRef)
#print "add ref: ", sourcesPhase.addReference_(mainFileRef)
#print "asdf"
#mainFile = sourcesPhase.buildFileForReference_(mainFileRef)
#
#if mainFile is None:
#	import pdb
#	pdb.set_trace()
#
#sourcesPhase.addBuildFile_(mainFile)
target.addBuildPhase_(sourcesPhase)

frameworksPhase = PBXFrameworksBuildPhase.alloc().init()
target.addBuildPhase_(frameworksPhase)

buildPhase = PBXResourcesBuildPhase.alloc().init()
target.addBuildPhase_(buildPhase)

written = project.writeToFileSystemProjectFile_userFile_checkNeedsRevert_(True, False, False)
print "written? ", written


ex = PBXProject.projectWithFile_(u'/Users/toulouse/code/ATToolkit/Tools/NewProject.xcodeproj')
